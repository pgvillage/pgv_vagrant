---
nagios_pg_version: "{{ postgresql_version }}"
nagios_running_postgresql_user: postgres
nagios_wal_dir_mp: "{{ postgresql_wal_mountpoint }}"
nagios_data_dir_mp: "{{ postgresql_data_mountpoint }}"

nagios_checks:
  multi_check:
# These checks don't work well with standby servers
#    check_postgres_last_analyze:
#      warning: "{{ 5 * 86400 }}"
#      critical: "{{ 5 * 86400 }}"
#    check_postgres_last_vacuum:
#      warning: "{{ 5 * 86400 }}"
#      critical: "{{ 7 * 86400 }}"
    check_postgres_locks:
      warning: "{{ nagios_locks_warning }}"
      critical: "{{ nagios_locks_critical }}"
    check_postgres_connection:
      warning: "{{ nagios_connections_warning }}"
      critical: "{{ nagios_connections_critical }}"
  check_postgres:
    check_postgres_wal_files:
      warning: "{{ nagios_wal_files_warning|int|round|int }}"
      critical: "{{ nagios_wal_files_critical|int|round|int }}"
    check_postgres_txn_time:
      warning: "{{ nagios_txn_time/2|round|int }}"
      critical: "{{ nagios_txn_time }}"
    check_postgres_database_size:
      warning: "{{nagios_db_size_warning }}"
      critical: "{{ nagios_db_size_critical }}"
    check_postgres_indexes_size:
      warning: "{{ nagios_idx_size_warning }}"
      critical: "{{ nagios_idx_size_critical }}"
#    check_postgres_version:
#      warning: "{{ nagios_pg_version }}"
#      critical: "{{ nagios_pg_version }}"
    check_postgres_relation_size:
      warning: "{{ nagios_relation_size_warning }}"
      critical: "{{ nagios_relation_size_critical }}"
    check_postgres_table_size:
      warning: "{{ nagios_table_size_warning }}"
      critical: "{{ nagios_table_size_critical }}"
    check_postgres_archive_ready:
      warning: "{{ nagios_archive_ready }}"
      critical: "{{ nagios_archive_ready * 2 }}"
# We could build an automation job to vaccum freeze all tables where datfrozenxid nears autovacuum_freeze_max_age.
# We could schedule that job during maintenance hours so that we don;t risk running into this during peak hours.
# And then it would make sense to monitor for this.
# But currently, we don't have that in place and we can take the performance penalty should datfrozenxid exceed autovacuum_freeze_max_age.
#    check_postgres_autovac_freeze:
#      # 100% - critical value * 2
#      warning: "{{ 2 * nagios_autovac_freeze - 100 }}%"
#      critical: "{{ nagios_autovac_freeze }}%"
    check_postgres_backends:
      warning: "{{ nagios_backends_warning }}"
      critical: "{{ nagios_backends_critical }}"
    check_postgres_bloat:
      warning: "{{ nagios_bloat_warning }}"
      critical: "{{ nagios_bloat_critical }}"
    check_postgres_commitratio:
      # Currently used but without values so 0% (check basically disabled)
      warning: "{{ 2 * nagios_commitratio }}%"
      critical: "{{ nagios_commitratio }}%"
    check_postgres_disabled_triggers:
      warning: "{{ nagios_disabled_triggers }}"
      critical: "{{ nagios_disabled_triggers * 2 }}"
    check_postgres_hitratio:
      warning: "{{ nagios_hitratio }}%"
      critical: "{{ nagios_hitratio }}%"
    check_postgres_prepared_txns:
      warning: "{{ nagios_prepared_txns }}"
      critical: "{{ nagios_prepared_txns * 2 }}"
    check_postgres_sequence:
      warning: "{{ 2 * nagios_sequence_space - 100 }}%"
      critical: "{{ nagios_sequence_space }}%"
    check_postgres_timesync:
      warning: "{{ (nagios_timesync/2)|round|int }}"
      critical: "{{ nagios_timesync|round|int }}"
    check_postgres_txn_wraparound:
      warning: "{{ nagios_txn_wraparound_warning }}"
      critical: "{{ nagios_txn_wraparound_criticial }}"
    check_postgres_disk_space:
      warning: "{{ nagios_disk_space_warning }}"
      critical: "{{ nagios_disk_space_critical }}"
  service_check:
    service_stolon_keeper:
      service: stolon-keeper
    service_stolon_proxy:
      service: stolon-proxy
    service_stolon_sentinel:
      service: stolon-sentinel
    service_crond:
      service: crond
  proces_check:
    running_postgresql:
      user: "{{ nagios_running_postgresql_user }}"
      search: "{{ nagios_running_postgresql_search }}"
      warning: "{{ nagios_running_postgresql_warning }}"
      critical: "{{ nagios_running_postgresql_critical }}"

nagios_check_postgres_links: "{{ nagios_checks.multi_check.keys()|list + nagios_checks.check_postgres.keys()|list }}"

nagios_servers:
  - hostname: sscc-nagios-l01p.int.ssc-campus.nl
    path: /opt/nagios/etc/host.cfg.d
    # Set to false for test and true for Acc and Prod
    enabled: "false"
    use: redhat-host
    hostgroups:
      - serverhosting-rivm
      - redhat-msh
      - virtualserver
      - postgres_dba
